version: "3.8"

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    PYTHONPATH: /opt/airflow/etl 
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - airflow_data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/sources:/opt/airflow/sources
    - ${AIRFLOW_PROJ_DIR:-.}/etl:/opt/airflow/etl
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        mkdir -p /opt/airflow/data/cache
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/data
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
  spotify-db:
    image: postgres:14
    container_name: spotify_db
    environment:
      POSTGRES_DB: ${SPOTIFY_DB_NAME}          
      POSTGRES_USER: ${SPOTIFY_DB_USER}        
      POSTGRES_PASSWORD: ${SPOTIFY_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - spotify-db-volume:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    restart: always
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${SPOTIFY_DB_USER} -d ${SPOTIFY_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  etl-runner:
    image: python:3.11
    container_name: etl_runner
    working_dir: /app
    volumes:
      - ./etl:/app
      - ./cache:/app/cache
      - ./sources:/app/sources
      - airflow_data:/app/data
      - ./.env:/app/.env
    command: tail -f /dev/null
    environment:
      - DB_HOST=${SPOTIFY_DB_HOST}
      - DB_PORT=${SPOTIFY_DB_PORT}
      - DB_NAME=${SPOTIFY_DB_NAME}
      - DB_USER=${SPOTIFY_DB_USER}
      - DB_PASS=${SPOTIFY_DB_PASSWORD}
      - SPOTIFY_API_KEY=${SPOTIFY_API_KEY}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
    depends_on:
      spotify-db:
       condition: service_healthy
    tty: true


volumes:
  postgres-db-volume:
  spotify-db-volume:
  airflow_data: